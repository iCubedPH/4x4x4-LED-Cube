#define dataPin 5
#define latchPin 3
#define clockPin 4

unsigned long currentMillis = 0;
unsigned long previousMillis = 0;
int interval = 1;

const int pins = 7;
const int outputPins[pins] = {3, 4, 5, 9 , 10, 11, 12};
const int layerPins[4] = {9, 10, 11, 12};

byte patternStates[10] = {12, 8, 8, 12, 8, 8, 20, 18, 26, 56};
uint16_t data = 0;
int stateTime = 0;
byte iteration = 0, displayRefresh = 0, layer = 0, stateCounter = 0;
byte numOfPatterns = 10, currentPattern = 0;

uint16_t pattern_0_data[12][4] = {
  {0xEEC8, 0xEEC8, 0xEEC8, 0xEEC8},
  {0xFEC0, 0xFEC0, 0xFEC0, 0xFEC0},
  {0xFF00, 0xFF00, 0xFF00, 0xFF00},
  {0xF330, 0xF330, 0xF330, 0xF330},
  {0x7331, 0x7331, 0x7331, 0x7331},
  {0x3333, 0x3333, 0x3333, 0x3333},
  {0x1377, 0x1377, 0x1377, 0x1377},
  {0x037F, 0x037F, 0x037F, 0x037F},
  {0x00FF, 0x00FF, 0x00FF, 0x00FF},
  {0x0CEF, 0x0CEF, 0x0CEF, 0x0CEF},
  {0x8CEE, 0x8CEE, 0x8CEE, 0x8CEE},
  {0xCCCC, 0xCCCC, 0xCCCC, 0xCCCC}
};
uint16_t pattern_1_data[8][4] = {
  {0xFFFF, 0x0000, 0x0000, 0x0000},
  {0xF99F, 0xF99F, 0x0000, 0x0000},
  {0x0000, 0xF99F, 0xF99F, 0x0000},
  {0x0000, 0x0000, 0xF99F, 0xF99F},
  {0x0000, 0x0000, 0x0000, 0xFFFF},
  {0x0000, 0x0000, 0x0660, 0x0660},
  {0x0000, 0x0660, 0x0660, 0x0000},
  {0x0660, 0x0660, 0x0000, 0x0000}
};
uint16_t pattern_2_data[8][4] = {
  {0x33CC, 0x0000, 0x0000, 0xCC33},
  {0x33CC, 0X33CC, 0XCC33, 0XCC33},
  {0x33CC, 0xFFFF, 0xFFFF, 0xcc33},
  {0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF},
  {0x33CC, 0xFFFF, 0xFFFF, 0xcc33},
  {0x33CC, 0X33CC, 0XCC33, 0XCC33},
  {0x33CC, 0x0000, 0x0000, 0xCC33},
  {0x0000, 0x0000, 0x0000, 0x0000}
};
uint16_t pattern_3_data[12][4] = {
  {0x0000, 0x0000, 0x9009, 0x0000},
  {0x0000, 0x0000, 0x0000, 0x9009},
  {0x0000, 0x0000, 0x6FF6, 0x6FF6},
  {0x0000, 0x6FF6, 0x6FF6, 0x0000},
  {0x6FF6, 0x6FF6, 0x0000, 0x0000},
  {0x9009, 0x0000, 0x0000, 0x0000},
  {0x0000, 0x9009, 0x0000, 0x0000},
  {0x9009, 0x0000, 0x0000, 0x0000},
  {0x6FF6, 0x6FF6, 0x0000, 0x0000},
  {0x0000, 0x6FF6, 0x6FF6, 0x0000},
  {0x0000, 0x0000, 0x6FF6, 0x6FF6},
  {0x0000, 0x0000, 0x0000, 0x9009}
};
uint16_t pattern_4_data[8][4] = {
  {0xCC33, 0x0000, 0x0000, 0x0000},
  {0x0000, 0x33CC, 0x0000, 0x0000},
  {0x0000, 0x0000, 0xCC33, 0x0000},
  {0x0000, 0x0000, 0x0000, 0x33CC},
  {0x0000, 0x0000, 0x0000, 0xCC33},
  {0x0000, 0x0000, 0x33CC, 0x0000},
  {0x0000, 0xCC33, 0x0000, 0x0000},
  {0x33CC, 0x0000, 0x0000, 0x0000}
};

uint16_t pattern_5_data[8][4] = {
  {0xFFFF, 0x0FF0, 0x0FF0, 0x0000},
  {0xFFFF, 0x0FF0, 0x0FF0, 0x0000},
  {0xF000, 0xFFF0, 0xFFF0, 0xF000},
  {0xF000, 0xFFF0, 0xFFF0, 0xF000},
  {0x0000, 0x0FF0, 0x0FF0, 0xFFFF},
  {0x0000, 0x0FF0, 0x0FF0, 0xFFFF},
  {0x000F, 0x0FFF, 0x0FFF, 0x000F},
  {0x000F, 0x0FFF, 0x0FFF, 0x000F}
};
uint16_t pattern_6_data[20][4] = {
  {0x0000, 0x0000, 0x0400, 0xFFFF},
  {0x0000, 0x0400, 0x0001, 0xFFFF},
  {0x0400, 0x0001, 0x0020, 0xFFFF},
  {0x0001, 0x0020, 0x8000, 0xFFFF},
  {0x0020, 0x8000, 0x0010, 0xFFFF},
  {0x8000, 0x0010, 0x0004, 0xFFFF},
  {0x0010, 0x0004, 0x0080, 0xFFFF},
  {0x0004, 0x0080, 0x2000, 0xFFFF},
  {0x0080, 0x2000, 0x0800, 0xFFFF},
  {0x2000, 0x0800, 0x0200, 0xFFFF},
  {0x0800, 0x0200, 0x4040, 0xFFFF},
  {0x0200, 0x4040, 0x0100, 0xFFFF},
  {0x4040, 0x0100, 0x0008, 0xFFFF},
  {0x0100, 0x0008, 0x0400, 0xFFFF},
  {0x0008, 0x0400, 0x1000, 0xFFFF},
  {0x0400, 0x1000, 0x0002, 0xFFFF},
  {0x1000, 0x0002, 0x8000, 0xFFFF},
  {0x0002, 0x8000, 0x0020, 0xFFFF},
  {0x8000, 0x0020, 0x1000, 0xFFFF},
  {0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF}
};
uint16_t pattern_7_data[18][4] = {
  {0x1000, 0x1000, 0x1000, 0x1000},
  {0x3000, 0x3000, 0x3000, 0x3000},
  {0x7000, 0x7000, 0x7000, 0x7000},
  {0xE000, 0xE000, 0xE000, 0xE000},
  {0xC800, 0xC800, 0xC800, 0xC800},
  {0x8880, 0x8880, 0x8880, 0x8880},
  {0x0888, 0x0888, 0x0888, 0x0888},
  {0x008C, 0x008C, 0x008C, 0x008C},
  {0x000E, 0x000E, 0x000E, 0x000E},
  {0x0007, 0x0007, 0x0007, 0x0007},
  {0x0013, 0x0013, 0x0013, 0x0013},
  {0x0111, 0x0111, 0x0111, 0x0111},
  {0x0310, 0x0310, 0x0310, 0x0310},
  {0x0700, 0x0700, 0x0700, 0x0700},
  {0x0640, 0x0640, 0x0640, 0x0640},
  {0x0460, 0x0460, 0x0460, 0x0460},
  {0x0060, 0x0060, 0x0060, 0x0060},
  {0x0020, 0x0020, 0x0020, 0x0020}
};

uint16_t pattern_8_data[26][4] = {
  {0x0001, 0x0001, 0x0001, 0x0001},
  {0x0013, 0x0013, 0x0013, 0x0013},
  {0x0137, 0x0137, 0x0137, 0x0137},
  {0x137E, 0x137E, 0x137E, 0x137E},
  {0x37EC, 0x37EC, 0x37EC, 0x37EC},
  {0x7EC8, 0x7EC8, 0x7EC8, 0x7EC8},
  {0xEC80, 0xEC80, 0xEC80, 0xEC80},
  {0xC800, 0xC800, 0xC800, 0xC800},
  {0x8000, 0x8000, 0x8000, 0x8000},
  {0x0000, 0x0000, 0x0000, 0x8000},
  {0x0000, 0x0000, 0x0000, 0x4000},
  {0x0000, 0x0000, 0x0000, 0x2000},
  {0x0000, 0x0000, 0x0000, 0x1000},
  {0x1000, 0x1000, 0x1000, 0x1000},
  {0x3100, 0x3100, 0x3100, 0x3100},
  {0x7310, 0x7310, 0x7310, 0x7310},
  {0xE731, 0xE731, 0xE731, 0xE731},
  {0xCE73, 0xCE73, 0xCE73, 0xCE73},
  {0x8CE7, 0x8CE7, 0x8CE7, 0x8CE7},
  {0x08CE, 0x08CE, 0x08CE, 0x08CE},
  {0x008C, 0x008C, 0x008C, 0x008C},
  {0x0008, 0x0008, 0x0008, 0x0008}, //
  {0x0000, 0x0000, 0x0000, 0x0008},
  {0x0000, 0x0000, 0x0000, 0x0004},
  {0x0000, 0x0000, 0x0000, 0x0002},
  {0x0000, 0x0000, 0x0000, 0x0001}
};
uint16_t pattern_9_data[56][4] = {
  {0x0000, 0x0000, 0x0000, 0x1000},
  {0x0000, 0x0000, 0x0000, 0x3000},
  {0x0000, 0x0000, 0x0000, 0x7000},
  {0x0000, 0x0000, 0x0000, 0xF000},
  {0x0000, 0x0000, 0x0000, 0xE800},
  {0x0000, 0x0000, 0x0000, 0xC880},
  {0x0000, 0x0000, 0x0000, 0x8888},
  {0x0000, 0x0000, 0x0000, 0x088C},
  {0x0000, 0x0000, 0x0000, 0x008E},
  {0x0000, 0x0000, 0x0000, 0x000F},
  {0x0000, 0x0000, 0x0000, 0x0017},
  {0x0000, 0x0000, 0x0000, 0x0113},
  {0x0000, 0x0000, 0x0100, 0x0111},
  {0x0000, 0x0000, 0x1100, 0x0110},
  {0x0000, 0x0000, 0x3100, 0x0100},
  {0x0000, 0x0000, 0x7100, 0x0000},
  {0x0000, 0x0000, 0xF000, 0x0000},
  {0x0000, 0x0000, 0xE800, 0x0000},
  {0x0000, 0x0000, 0xC880, 0x0000},
  {0x0000, 0x0000, 0x8888, 0x0000},
  {0x0000, 0x0000, 0x088C, 0x0000},
  {0x0000, 0x0000, 0x008E, 0x0000},
  {0x0000, 0x0000, 0x000F, 0x0000},
  {0x0000, 0x0000, 0x0017, 0x0000},
  {0x0000, 0x0010, 0x0013, 0x0000},
  {0x0000, 0x0110, 0x0011, 0x0000},
  {0x0000, 0x1110, 0x0010, 0x0000},
  {0x0000, 0x3110, 0x0000, 0x0000},
  {0x0000, 0x7100, 0x0000, 0x0000},
  {0x0000, 0xF000, 0x0000, 0x0000},
  {0x0000, 0xE800, 0x0000, 0x0000},
  {0x0000, 0xC880, 0x0000, 0x0000},
  {0x0000, 0x8888, 0x0000, 0x0000},
  {0x0000, 0x088C, 0x0000, 0x0000},
  {0x0000, 0x008E, 0x0000, 0x0000},
  {0x0000, 0x000F, 0x0000, 0x0000},
  {0x0001, 0x0007, 0x0000, 0x0000},
  {0x0011, 0x0003, 0x0000, 0x0000},
  {0x0111, 0x0001, 0x0000, 0x0000},
  {0x1111, 0x0000, 0x0000, 0x0000},
  {0x3110, 0x0000, 0x0000, 0x0000},
  {0x7100, 0x0000, 0x0000, 0x0000},
  {0xF000, 0x0000, 0x0000, 0x0000},
  {0xE800, 0x0000, 0x0000, 0x0000},
  {0xC880, 0x0000, 0x0000, 0x0000},
  {0x8888, 0x0000, 0x0000, 0x0000},
  {0x088C, 0x0000, 0x0000, 0x0000},
  {0x008E, 0x0000, 0x0000, 0x0000},
  {0x000F, 0x0000, 0x0000, 0x0000},
  {0x0007, 0x0000, 0x0000, 0x0000},
  {0x0003, 0x0000, 0x0000, 0x0000},
  {0x0001, 0x0000, 0x0000, 0x0000},
  {0x0660, 0x0000, 0x0000, 0x0000},
  {0x0000, 0x0660, 0x0000, 0x0000},
  {0x0000, 0x0000, 0x0660, 0x0000},
  {0x0000, 0x0000, 0x0000, 0x0660}
};
void setup() {
  for (int x = 0; x < pins; x++) {
    pinMode(outputPins[x], OUTPUT);
  }
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, 0);
  shiftOut(dataPin, clockPin, MSBFIRST, 0);
  digitalWrite(latchPin, HIGH);
}
void patternHandler() {
  stateCounter++;
  if (stateCounter >= patternStates[currentPattern]) {
    stateCounter = 0;
    iteration++;
    if (iteration >= 10) {
      currentPattern++;
      iteration = 0;
      if (currentPattern >= numOfPatterns) {
        currentPattern = 0;
      }
    }
  }
}
void display() {
  switch (currentPattern) {
    case 0 :
      data = pattern_0_data[stateCounter][layer];
      break;
    case 1:
      data = pattern_1_data[stateCounter][layer];
      break;
    case 2:
      data = pattern_2_data[stateCounter][layer];
      break;
    case 3:
      data = pattern_3_data[stateCounter][layer];
      break;
    case 4:
      data = pattern_4_data[stateCounter][layer];
      break;
    case 5:
      data = pattern_5_data[stateCounter][layer];
      break;
    case 6:
      data = pattern_6_data[stateCounter][layer];
      break;
    case 7:
      data = pattern_7_data[stateCounter][layer];
      break;
    case 8:
      data = pattern_8_data[stateCounter][layer];
      break;
    case 9:
      data = pattern_9_data[stateCounter][layer];
      break;
  }
  for (int x = 0; x < 4; x++) {
    digitalWrite(layerPins[x], LOW);
  }
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, highByte(data));
  shiftOut(dataPin, clockPin, MSBFIRST, lowByte(data));
  digitalWrite(latchPin, HIGH);
  digitalWrite(layerPins[layer], HIGH);
  layer++;
  if (layer >= 4) {
    layer = 0;
  }
}
void loop() {
  currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    stateTime++;
    displayRefresh++;
    if (displayRefresh >= 3) {
      displayRefresh = 0;
      display();
    }
    if (stateTime >= 100) {
      patternHandler();
      stateTime = 0;
    }
  }
}


